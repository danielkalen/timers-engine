// Generated by CoffeeScript 1.10.0
(function() {
  (function() {
    return this.timers = {
      timers: {},
      callbacks: {},
      currentTimes: {},
      add: function(type, name, callback, time, stopAfter) {
        if (type == null) {
          type = 'interval';
        }
        timers.currentTimes[name] = time;
        timers.callbacks[name] = {};
        if (type === 'timeout') {
          return timers.timers[name] = setTimeout(function() {
            return callback();
          }, time);
        } else if (type === 'interval') {
          timers.timers[name] = setInterval(function() {
            callback();
            return timers.invoke(name, time);
          }, time);
          if (stopAfter) {
            return setTimeout(function() {
              return clearInterval(timers.timers[name]);
            }, stopAfter);
          }
        }
      },
      remove: function(name) {
        clearInterval(timers.timers[name]);
        delete timers.timers[name];
        delete timers.callbacks[name];
        return delete timers.currentTimes[name];
      },
      invoke: function(name, time) {
        var callback, i, len, newTime, prevTime, ref, results;
        prevTime = timers.currentTimes[name];
        newTime = timers.currentTimes[name] = prevTime + time;
        if (timers.callbacks[name][newTime] != null) {
          ref = timers.callbacks[name][newTime];
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            callback = ref[i];
            results.push(callback());
          }
          return results;
        }
      },
      listen: function(name, time, callbackToInvoke) {
        if (timers.callbacks[name][time] == null) {
          timers.callbacks[name][time] = [];
        }
        return timers.callbacks[name][time].push(callbackToInvoke);
      }
    };
  })();

}).call(this);
